@model QuestionApp.Models.QuizLibrary
@{
    ViewBag.Title = "Düzenle";
}
@using (Html.BeginForm("Edit", "Library", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12 col-xlg-12 col-md-12">
            <div class="card">
          
                <div class="card-body">
                    <p>
                        @Html.ActionLink("< Listeye Geri Dön", "Index")
                    </p>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = "" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Questions, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.ListBoxFor(model => model.Question, new SelectList(ViewBag.sorular, "ID", "Questions"), new { @class = "form-control", @id = "kulls" })
                            @Html.ValidationMessageFor(model => model.Question, "", new { @class = "text-danger" })
                        </div>
                    </div>
                  
                    <div class="form-group">
                        @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control", @required = "" } })
                            @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" class="btn btn-outline-primary" name="Güncelle" value="Ekle" />
                        </div>
                    </div>
                    <p>
                    <p>
                        @Html.ActionLink("< Listeye Geri Dön", "Index")
                    </p>
                    </p>
                </div>
            </div>
        </div>
    </div>
}
<link href="~/Content/toastr.min.css" rel="stylesheet" />
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/toastr.min.js"></script>
    <link href="~/Content/multi-select.css" rel="stylesheet" />
    <script src="~/Content/jquery.multi-select.js"></script>
    <script src="~/Scripts/Searchq.js"></script>
    <script type="text/javascript">
        // run pre selected options
        $('#kulls').multiSelect({
            selectableHeader: "<input type='text' class='form-control' autocomplete='off' placeholder='Kullanıcı ara'>",
            selectionHeader: "<input type='text' class='form-control' autocomplete='off' placeholder='Seçilmiş olanı ara'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';
                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });
                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },
            afterSelect: function () {
                this.qs1.cache();
                this.qs2.cache();
            },
            afterDeselect: function () {
                this.qs1.cache();
                this.qs2.cache();
            }
        });
    </script>
    @if (TempData["hata"] != null)
    {
        <script type="text/javascript">
            $(document).ready(function () {
                Command: toastr["success"]("Kayıt Düzenlendi")
                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-bottom-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                }
            })
        </script>
    }
    @if (TempData["getir"] != null)
    {
        <script type="text/javascript">
            $(document).ready(function () {
                Command: toastr["success"]("Kayıt Getirildi")
                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-bottom-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                }
            })
        </script>
    }
}
